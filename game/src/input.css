@import "tailwindcss";

* {
    user-select: none;
}

#stats_menu {
    position: fixed;
    top: 10px;
    right: 10px;
    background: rgba(63, 63, 63, 0.6);
    color: white;
    font-family: monospace;
    padding: 8px 12px;
    border-radius: 6px;
    font-size: 14px;
    line-height: 1.4em;
    z-index: 9999;
    box-shadow: 0 0 8px rgba(0, 0, 0, 0.3);
}

#stats_menu div {
    margin: 2px 0;
}

:root {
    --hb-width: 125px;
    --hb-height: 18px;
    --bg-glass: rgba(0, 0, 0, 0.6);
    --inner-bg: rgba(18, 18, 18, 0.55);
    --safe-grad: linear-gradient(90deg, #00ff4c, #a6ff00);
    --hurt-grad: linear-gradient(90deg, #ff4b4b, #a10000);
    --edge-color: rgba(255, 255, 255, 0.06);
    --pulse-speed: 1.1s;
}

/* container */
#health {
    position: fixed;
    top: 12px;
    left: 12px;
    width: var(--hb-width);
    height: var(--hb-height);
    padding: 2px;
    border-radius: 6px;
    background: linear-gradient(180deg, rgba(0, 0, 0, 0.65), rgba(0, 0, 0, 0.5));
    border: 1px solid rgba(255, 255, 255, 0.04);
    box-shadow:
        0 4px 20px rgba(0, 0, 0, 0.75),
        0 0 18px rgba(120, 0, 0, 0.06) inset;
    backdrop-filter: blur(4px) saturate(120%);
    z-index: 99999;
    pointer-events: none;
    /* HUD not interactive by default */
    overflow: visible;
}

/* subtle frame glow / scratch */
#health::after {
    content: '';
    position: absolute;
    inset: 0;
    border-radius: 6px;
    pointer-events: none;
    background-image:
        radial-gradient(120px 30px at 10% 10%, rgba(255, 0, 0, 0.03), transparent 15%),
        repeating-linear-gradient(90deg, rgba(255, 255, 255, 0.01) 0 1px, transparent 1px 4px);
    mix-blend-mode: overlay;
    opacity: 0.6;
    transform: translateZ(0);
}

/* inner background (track) */
#inner {
    width: 100%;
    height: 100%;
    background: var(--inner-bg);
    border-radius: 4px;
    overflow: hidden;
    position: relative;
    box-shadow: 0 0 12px rgba(0, 0, 0, 0.6) inset;
    border: 1px solid rgba(255, 255, 255, 0.03);
}

/* the bar */
.bar {
    height: 100%;
    width: 100%;
    /* change via inline style width: "75%" */
    background: var(--safe-grad);
    border-radius: 4px;
    box-shadow:
        0 0 12px rgba(0, 255, 77, 0.12),
        0 4px 10px rgba(0, 0, 0, 0.6) inset;
    transition: width 0.3s linear, filter 0.2s ease;
    position: relative;
    will-change: width, filter;
    overflow: visible;
}

/* metallic sheen */
.bar::before {
    content: '';
    position: absolute;
    left: -30%;
    top: -40%;
    width: 60%;
    height: 180%;
    transform: skewX(-18deg);
    background: linear-gradient(180deg, rgba(255, 255, 255, 0.10), rgba(255, 255, 255, 0.02));
    filter: blur(6px) contrast(1.2);
    opacity: 0.65;
    pointer-events: none;
}

/* low-health state (activated by adding .low to .bar) */
.bar.low {
    background: var(--hurt-grad);
    box-shadow:
        0 0 20px rgba(255, 50, 50, 0.45),
        0 6px 18px rgba(0, 0, 0, 0.6) inset;
    animation: pulse-red calc(var(--pulse-speed) * 1.2) infinite ease-in-out;
    filter: saturate(1.3) contrast(1.05);
}

/* heartbeat / flicker */
@keyframes pulse-red {
    0% {
        transform: translateY(0) scaleX(1);
        box-shadow: 0 0 8px rgba(255, 50, 50, 0.25);
    }

    40% {
        transform: translateY(-1px) scaleX(1.02);
        box-shadow: 0 0 18px rgba(255, 60, 60, 0.45);
    }

    60% {
        transform: translateY(0) scaleX(0.995);
        box-shadow: 0 0 12px rgba(255, 10, 10, 0.35);
    }

    100% {
        transform: translateY(0) scaleX(1);
        box-shadow: 0 0 8px rgba(255, 50, 50, 0.25);
    }
}

/* dripping / blood edge effect â€” pseudo-element attached to the inner track */
#inner::after {
    content: '';
    position: absolute;
    right: -8px;
    top: 50%;
    width: 20px;
    height: 60px;
    transform: translateY(-50%);
    pointer-events: none;
    opacity: 0;
    /* toggled via .low to show */
    transition: opacity 0.25s ease;
    background:
        radial-gradient(10px 6px at 50% 0%, rgba(180, 0, 0, 0.9), rgba(120, 0, 0, 0.7) 40%, transparent 60%),
        linear-gradient(180deg, rgba(120, 0, 0, 0.9), rgba(60, 0, 0, 0.6));
    border-radius: 8px 8px 30% 30%;
    mix-blend-mode: multiply;
    filter: blur(0.6px);
}

/* show blood drip when low */
.bar.low~#inner::after,
#inner .bar.low+* {
    /* If the structure differs, show via this fallback */
}

.bar.low+* {}

/* Instead toggle drip by applying a .low state to the parent for reliability */
#health.low #inner::after {
    opacity: 1;
    transform: translateY(-50%) translateX(0);
}

/* optional cracked glass overlay when near death */
#health.critical {
    box-shadow: 0 6px 30px rgba(0, 0, 0, 0.85), 0 0 28px rgba(120, 0, 0, 0.08) inset;
}

#health.critical::before {
    content: '';
    position: absolute;
    inset: 0;
    background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="400" height="40"><path stroke="%23ff0000" stroke-opacity="0.06" d="M10,20 C50,2 90,38 140,20 C190,2 230,38 340,20" fill="none"/></svg>');
    background-repeat: repeat-x;
    opacity: 0.6;
    mix-blend-mode: overlay;
    pointer-events: none;
}

/* small red vignette around the HUD when critical */
#health.critical::after {
    content: '';
    position: absolute;
    inset: -6px;
    border-radius: 8px;
    box-shadow: 0 0 24px rgba(200, 0, 0, 0.18), 0 0 6px rgba(255, 0, 0, 0.06) inset;
    pointer-events: none;
}

/* utility: make HUD parent reflect low state (call in JS) */
#health.low {
    /* when health <= 25 */
    --hb-width: 140px;
}

/* tiny accessibility: show numeric overlay */
#health .hp-text {
    position: absolute;
    right: 8px;
    top: 50%;
    transform: translateY(-50%);
    font-family: 'ui-monospace', SFMono-Regular, Menlo, monospace;
    font-size: 11px;
    color: rgba(255, 255, 255, 0.9);
    text-shadow: 0 1px 3px rgba(0, 0, 0, 0.8);
    pointer-events: none;
    user-select: none;
    font-weight: 700;
    letter-spacing: 0.6px;
}

@font-face {
    font-family: "Stat";
    src: url("/fonts/stat_ft.ttf") format("truetype");
    font-weight: 400;
    /* regular / light variant */
    font-style: normal;
    font-display: swap;
    /* recommended for web: avoids invisible text */
    /* optional: unicode-range: U+000-5FF; */
}

@font-face {
    font-family: "Stat";
    src: url("/fonts/stat_hh.ttf") format("truetype");
    font-weight: 700;
    /* bold / heavy variant */
    font-style: normal;
    font-display: swap;
}

/* Fallback stack and usage */
:root {
    --ui-font: "Stat", system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
}

body {
    font-family: var(--ui-font);
    font-weight: 400;
}

/* Force the heavy file for headings */
h1,
h2,
h3,
.heavy {
    font-weight: 700;
}